# Trading Agent Configuration

# Data Settings
data:
  symbols: ["AAPL", "GOOGL", "MSFT", "TSLA"]
  start_date: "2020-01-01"
  end_date: "2023-12-31"
  train_split: 0.8
  # Lookback window in number of candles (automatically adjusted based on timeframe)
  lookback_window: 24  # Will be adjusted based on timeframe
  # Timeframe Configuration
  timeframe: "1h"  # 1-hour candles for trading
  lookback_period: "729d"  # 1 year of historical data
  # Note: For hourly data, Yahoo Finance only provides up to 730 days (2 years) of historical data
  # - Use "730d" for maximum historical data (2 years)
  # - Use "365d" for 1 year (recommended for better performance)
  # - Use "90d" for 3 months
  # - Use "30d" for 1 month

# Environment Settings
environment:
  initial_balance: 10000
  transaction_cost: 0.0005  # Lower cost for high-frequency trading
  max_position: 0.5  # Smaller position size for high-frequency
  reward_scaling: 10.0  # Higher scaling for smaller price movement

# Technical Indicators (optimized for 1m data)
indicators:
  # Moving Averages
  - "SMA_5"     # 5-min SMA
  - "SMA_15"    # 15-min SMA
  - "SMA_60"    # 1-hour SMA
  - "EMA_10"    # 10-period EMA
  - "EMA_30"    # 30-period EMA
  
  # Momentum
  - "RSI_7"     # 7-period RSI
  - "RSI_14"    # 14-period RSI
  - "MACD"      # MACD line
  - "MACD_signal" # MACD signal line
  - "MACD_hist"  # MACD histogram
  
  # Volatility
  - "BB_upper"   # Upper Bollinger Band
  - "BB_middle"  # Middle Band (SMA)
  - "BB_lower"   # Lower Bollinger Band
  - "ATR_7"      # 7-period ATR
  
  # Volume
  - "volume_ma_5"   # 5-min volume MA
  - "volume_ma_15"  # 15-min volume MA
  - "VWAP"          # Volume Weighted Average Price
  
  # Price Action
  - "high_low_pct"
  - "price_change"
  - "order_book_imbalance"

# Model Architecture
model:
  hidden_layers: [256, 128, 64]
  # Option 1: Single activation for all layers
  activation: "relu"
  # Option 2: Per-layer activations (overrides single activation if provided)
  layer_activations: ["relu", "tanh", "leaky_relu"]  # Must match hidden_layers length
  dropout: 0.2
  # Available activations: relu, tanh, sigmoid, leaky_relu, elu, swish, gelu

# Training Parameters (SAC for high-frequency)
training:
  episodes: 10  # Number of training episodes
  max_steps_per_episode: 0  # 0 means use all available data
  batch_size: 512  # Larger batch for stability
  learning_rate: 0.0001  # Lower learning rate for stability
  gamma: 0.99  # Higher discount for more steps
  tau: 0.005  # Soft update parameter
  alpha: 0.2  # Temperature parameter (entropy)
  
  # Replay buffer
  memory_size: 1000000  # Larger buffer for more diverse experience
  batch_size: 1024  # Larger batch for stable updates
  
  # Training frequency
  start_steps: 10000  # Random actions in the beginning
  update_after: 1000  # Start updating after this many steps
  update_every: 50  # Update every N steps
  
  # Epsilon not used in SAC, but keeping for compatibility
  epsilon_start: 1.0
  epsilon_end: 0.01
  epsilon_decay: 0.995
  
  # Device configuration
  device: "auto"  # Will be set to cuda if available, else cpu

# SAC Parameters
sac:
  learning_rate: 0.0003
  gamma: 0.99
  tau: 0.005  # Soft update parameter
  alpha: 0.2  # Temperature parameter (entropy regularization)
  batch_size: 512  # Optimized for RTX 3070 8GB
  memory_size: 1000000
  target_update_interval: 1
  automatic_entropy_tuning: true  # Automatically tune alpha
  device: "cuda"  # Uses training.device if not specified

# Multi-Agent Settings
multi_agent:
  enabled: true
  symbols: ["AAPL", "GOOGL", "MSFT", "TSLA"]
  agent_types: ["dqn", "sac", "dqn", "sac"]  # Agent type for each symbol
  allocation_agent:
    type: "sac"  # Agent type for portfolio allocation
    update_frequency: 10  # Update allocation every N steps
    min_allocation: 0.01  # Minimum allocation per stock (1%)
    max_allocation: 0.70  # Maximum allocation per stock (70%)
  coordination:
    communication: false  # Enable agent communication
    shared_memory: false  # Share experiences between agents
    ensemble_decisions: false  # Use ensemble for final decisions

# Evaluation
evaluation:
  test_episodes: 10
  save_plots: true
  metrics: ["total_return", "sharpe_ratio", "max_drawdown", "win_rate"]
